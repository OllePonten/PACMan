#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 6.0.1
#  in conjunction with Tcl version 8.6
#    Feb 12, 2021 01:17:32 PM CET  platform: Windows NT
#    Feb 15, 2021 12:39:35 PM CET  platform: Windows NT

import pacmangui
import PacMan

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True
    
import tkinter.messagebox

def set_Tk_var():
    global Int_Var, Rep_Var, Temp_Sep_Var, Pos_Var
    Int_Var = tk.IntVar()
    Rep_Var = tk.IntVar()
    Pos_Var = tk.StringVar()
    Temp_Sep_Var = tk.IntVar()


def init(top, gui, PMH = None, q = None, *args, **kwargs):
    global w, top_level, PacManHndl
    w = gui
    top_level = top
    PacManHndl = PMH

def load_AF():
    try:
        Threshold = float(w.dZMin_ent.get())
        Strength = float(w.AFStrength_ent.get())
        minCirc = float(w.minCirc_ent.get())
        minInert = float(w.minInert_ent.get())
        sizes = w.size_ent.get().split(',')
        PacManHndl.AutoFocuser.GUI_set_Params([Threshold,Strength,minCirc,minInert,int(sizes[0]),int(sizes[1])])
        PacMan.logmsg(f"Autofocus parameters changed to: {[Threshold,Strength,minCirc,minInert,int(sizes[0]),int(sizes[1])]}")
    except:
        print("One of the autofocus value was not correctly formmated")
    
def save_pos_list():
    print("Save pos list pressed")
    
    try:

        PacManHndl.StageCom.DEBUG_SAVE_POSITIONS(w.Pos_list_ent.get())
    except Exception as e:
        exception_Handler(e)
        
def load_pos_list():
    #ipdb.set_trace()
    print("Load pos list pressed")
    try:
        PacManHndl.StageCom.DEBUG_LOAD_POSITIONS(w.Pos_list_ent.get())
        update_pos_list()
    except Exception as e:
        exception_Handler(e)

def rld_ipam():
    print("Reload IPAM button pressed")
    try:
        PacManHndl.IPam.initialize_Connection()
    except Exception as e:
        exception_Handler(e)

def rld_mm():
    print("Reload mm button pressed")
    try:
        PacManHndl.PMCom.reinit()
    except Exception as e:
        exception_Handler(e)

def rld_pos():
    print('Reload pos list button pressed')
    try:
        PacManHndl.StageCom.DEBUG_LOAD_POSITIONS()
        for i in range(len(PacManHndl.StageCom.Pos_List)):
            showvar = PacManHndl.StageCom.get_pos(i)
            formstring = f"{showvar[1]} \t {showvar[0]}"
            w.pos_list.insert(tk.END,formstring)
        w.Pos_name_var.set(f"Pos{PacManHndl.StageCom.get_pos_list_length()}")
    except Exception as e:
        exception_Handler(e)

def rld_start():
    print("Reload start script button pressed")
    try:
        PacManHndl.IPam.read_Start_Script()
    except Exception as e:
        exception_Handler(e)

def send_serial_command():
   msg = w.ser_com_ent.get()
   w.ser_com_var.set("")
   #w.ser_com_ent.set("")
   if("log:" in msg[0:5]):
       PacMan.logmsg(msg)
   elif("Queue:" in msg[0:7]):
       #Format: Timer: Repetition,Command,Parameter   
       #Custom commands: TempSep,{seconds}
       #
       timer_cmd = msg[6:].split(",")
       try:
           PacMan.logmsg(f"Queing following command:{timer_cmd[1]}, {timer_cmd[2]} to repetition {timer_cmd[0]}")
           PacManHndl.add_command(int(timer_cmd[0]), timer_cmd[1:3])
       except Exception as e:
           exception_Handler(e)
   elif("IPAM:" in msg[0:6]):
       print(f"Sending Manual IPAM Command:{msg[5:]}")
       IPAM_Cmd = msg[5:].split(",")

       PacManHndl.IPam.send_Command(IPAM_Cmd[0],IPAM_Cmd[1])
   elif("Prior:" in msg[0:7]):      
       prior_cmd = msg[6:]
       print(f"Sending Manual Serial Command:{prior_cmd}")
       try:
           PacMan.logmsg(PacManHndl.StageCom.msg_resp(prior_cmd))
       except Exception as e:
           exception_Handler(e)

def update_pos_list():
    if(PacManHndl.StageCom.get_pos_list_length()>0):
        try:
            w.pos_list.delete(0,tk.END)
            for pos in PacManHndl.StageCom.Pos_List:
                formstring = f"{pos[0]} \t {pos[1]}"
                w.pos_list.insert(tk.END,formstring)
        except Exception as e:
            exception_Handler(e)

def add_offset(index):
    try:
        print(index)
        PacManHndl.StageCom.add_offset(index[0], str(w.Pos_name_var.get()))
        update_pos_list()
    except Exception as e:
        exception_Handler(e)
            
def goto_sel_pos(index):
    print("Go to pos button pressed")
    try:
        index = int(index[0])
        PacManHndl.StageCom.go_to_position(index)
    except Exception as e:
        exception_Handler(e)
        
def del_pos(index):
    try:
        w.pos_list.delete(index)
        PacManHndl.StageCom.remove_pos(index[0])
        update_pos_list()
    except Exception as e:
        exception_Handler(f"Something went wrong when trying to delete a position. {e}")

def add_pos():
    try:
        PacManHndl.StageCom.add_pos(w.Pos_name_var.get())
        showvar = PacManHndl.StageCom.get_pos(-1)
        formstring = f"{showvar[1]} \t {showvar[0]}"
        w.pos_list.insert(tk.END,formstring)
    except Exception as e:
        exception_Handler(e)
    w.Pos_name_var.set(f"Pos{PacManHndl.StageCom.get_pos_list_length()}")

def run_pos():
    print("Run position button pressed")
    try:
        PacManHndl.IPam.execute_Queue([False, 'Pytest',0,0])
    except Exception as e:
        exception_Handler(e)

def run_start():
    print("Run start script pressed")
    try:      
        name = w.Pos_name_var.get()
        PacManHndl.IPam.execute_Queue([True, f"{name}",0,0])
    except Exception as e:
        exception_Handler(e)

def snap_img():
    print("Yield button pressed")
    try:
        PacManHndl.IPam.send_Command('Yield','')
    except Exception as e:
        exception_Handler(e)

def run_exp():
    w.run_exp()

def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None
    
def exception_Handler(exc):
    tb = exc.__traceback__
    msg = ""
    while(tb):
        msg = msg + "\n" + str.format("Exception in {}: {}. Exception {} ".format(tb.tb_frame.f_code.co_filename,tb.tb_lineno, exc))
        tb = tb.tb_next
    tk.messagebox.showerror("Exception", msg)

def make_z_stack(step=1,extent=10):
    if(type(step) == str and "," in step):
        #Assume its formatted.
        step,extent = step.split(",")
        try:
            float(step)
            float(extent)
        except ValueError:
            exception_Handler("Z-Stack parameters not numbers.")
    else:
        #Assume there is nonsense in the string, use default values
        step = 1
        extent = 10
    import time, skimage, tifffile, os, numpy as np
    IPAMC = PacManHndl.IPam
    SC = PacManHndl.StageCom
    IWE_fp = PacManHndl.Experiment_Dir
    if(not tk.messagebox.askyesno("WARNING: Zero", "WARNING: Making a Z-Stack will zero the Z-Position, please press Yes to confirm making a z-stack or no to cancel.")):
       return
    SC.msg_resp("PZ 0")
    IPAMC.send_Command("Select Image = ", "Ft")
    IPAMC.send_Command("Ft only","")
    print("Taking image 0")
    IPAMC.send_Command("Save Tiff Image = ", "FocusImg0")
    Positions = [0]
    for direction in range(-1,2,2):
        for i in np.arange(step,extent+step,step):
            print(f"Taking image {i*direction} ")
            SC.go_to_z(i*direction)
            time.sleep(2)
            SC.go_to_z(i*direction)
            time.sleep(2)
            foc = SC.get_focus()
            print(f"Position: {foc}\n")
            Positions.append(foc)          
            time.sleep(5)
            IPAMC.send_Command("Select Image = ", "Ft")
            IPAMC.send_Command("Ft only","")
            IPAMC.send_Command("Save Tiff Image = ", f"FocusImg{i*direction}")
        time.sleep(2)
        SC.go_to_z(0)
        time.sleep(2)
    focus_stack_col = skimage.io.imread_collection(IWE_fp+"\\FocusImg*",plugin = 'tifffile')
    focus_stack_imgs = focus_stack_col.concatenate()
    tifffile.imwrite(IWE_fp+"\\"+"Z_Stack.tif",focus_stack_imgs,imagej = True)
    with open (IWE_fp+"\\focus_pos.txt", mode ="a") as file:
        for focpos in Positions:
            file.write('focpos\n')   
    for fp in focus_stack_col.files:
        if (os.path.isfile(fp)):
            os.remove(fp)
        else:
            print(f"File at {fp} not found")
